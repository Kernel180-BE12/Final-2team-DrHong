# .github/workflows/deploy-dev.yml

name: Deploy to EC2 on dev branch push

# 1. 언제 이 액션을 실행할 것인가?
on:
  push:
    branches:
      - dev  # 'dev' 브랜치에 푸시될 때만 실행됩니다.

# 2. 어떤 작업(Job)들을 실행할 것인가?
jobs:
  deploy:
    # 3. 어떤 환경에서 실행할 것인가?
    runs-on: ubuntu-latest  # GitHub가 제공하는 최신 우분투 리눅스 환경에서 실행됩니다.
    
    # 4. 어떤 단계(Step)들을 순서대로 실행할 것인가?
    steps:
      # 4-1. EC2 서버에 SSH로 원격 접속하기
      - name: Connect to EC2 and deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}             # GitHub Secrets에 등록한 EC2 IP 주소
          username: ec2-user                        # EC2 기본 사용자 이름
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}   # GitHub Secrets에 등록한 .pem 키 내용
          script: |
            # 홈 디렉토리로 이동
            cd /home/ec2-user
            
            # 'Final-2team-DrHong' 폴더가 존재하는지 확인합니다.
            if [ -d "Final-2team-DrHong" ]; then
              echo "프로젝트 폴더가 존재합니다. 최신 코드를 받아옵니다..."
              cd Final-2team-DrHong
              git pull origin dev
            else
              echo "프로젝트 폴더가 없습니다. 새로 클론합니다..."
              git clone https://github.com/Kernel180-BE12/Final-2team-DrHong.git
              cd Final-2team-DrHong
              git checkout dev  # dev 브랜치로 체크아웃
            fi
            
            # .env 파일이 있는지 확인하고, 없으면 .env.example을 복사해서 생성합니다.
            if [ ! -f ".env" ]; then
              if [ -f ".env.example" ]; then
                echo ".env 파일을 생성합니다..."
                cp .env.example .env
              else
                echo "경고: .env.example 파일이 없습니다."
              fi
            fi
            
            # 기존 컨테이너 정리 (필요시)
            docker compose down --remove-orphans || true
            
            # docker-compose를 사용하여 모든 서비스를 빌드하고 백그라운드에서 재시작합니다.
            docker compose up --build -d
            
            # 배포 상태 확인
            echo "배포 완료! 컨테이너 상태:"
            docker compose ps
