# =========================================
# 테스트 환경 전용 데이터베이스 설정
# H2 인메모리(In-memory) 데이터베이스를 사용하여 빠르고 독립적인 테스트를 지원합니다.
# =========================================

# H2 데이터베이스 연결 URL입니다.
# jdbc:h2:mem:testdb는 'testdb'라는 이름의 인메모리 데이터베이스를 사용하겠다는 의미입니다.
# 인메모리 DB는 테스트 실행 중에만 메모리에서 동작하고 테스트가 끝나면 사라집니다.
spring.datasource.url=jdbc:h2:mem:testdb

# H2 데이터베이스용 JDBC 드라이버 클래스입니다.
spring.datasource.driverClassName=org.h2.Driver

# H2 데이터베이스 접속에 사용할 사용자 이름입니다.
# 인메모리 테스트에서는 보통 'sa' (System Administrator)를 관례적으로 사용합니다.
spring.datasource.username=sa

# H2 데이터베이스 접속에 사용할 비밀번호입니다.
# 마찬가지로 테스트용이므로 간단한 비밀번호를 사용하거나 비워두기도 합니다.
spring.datasource.password=password

# JPA가 H2 데이터베이스에 맞는 SQL 쿼리를 생성하도록 방언(Dialect)을 설정합니다.
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# =========================================
# 테스트 환경 전용 추가 설정
# =========================================

# 컨트롤러 테스트 시 불필요한 JDBC 기반 세션 기능을 비활성화하여
# 데이터베이스 설정 충돌 문제를 방지합니다.
spring.session.store-type=none

# =========================================
# JPA 설정
# =========================================
# 테스트 시마다 스키마를 새로 생성하고 삭제하여 깨끗한 테스트 환경을 보장합니다.
spring.jpa.hibernate.ddl-auto=create-drop
# 테스트 시 SQL 로그 출력을 비활성화하여 로그를 깔끔하게 유지합니다.
spring.jpa.show-sql=false
# OSIV(Open Session In View) 비활성화로 성능 이슈를 방지합니다.
spring.jpa.open-in-view=false

# =========================================
# 테스트 환경용 JWT 설정
# =========================================
# 테스트용 JWT 비밀키입니다. 실제 환경과 다른 고정값을 사용합니다.
jwt.secret.key=test-secret-key-for-testing-purposes-only-12345678901234567890

# =========================================
# 테스트 환경용 Rate Limiting 설정 (실제 제한값 사용)
# =========================================
# RateLimitServiceTest에서 실제 Bucket4j 로직을 테스트하기 위해 실제 제한값을 사용합니다.
rate-limit.email-send.requests-per-window=3
rate-limit.email-send.window-duration-minutes=5
rate-limit.email-verify.requests-per-window=5
rate-limit.email-verify.window-duration-minutes=10
rate-limit.signup.requests-per-window=10
rate-limit.signup.window-duration-minutes=60
rate-limit.login.requests-per-window=5
rate-limit.login.window-duration-minutes=15
rate-limit.refresh-token.requests-per-window=10
rate-limit.refresh-token.window-duration-minutes=5

# =========================================
# 테스트 환경용 Redis 설정 (Mock 사용)
# =========================================
# TestAutoConfiguration의 Mock Redis 빈 사용을 위한 설정
spring.data.redis.host=localhost
spring.data.redis.port=6379

# 빈 정의 오버라이드 허용 (Spring boot 의 자동설정과 TestAutoConfiguration의 충돌 방지)
spring.main.allow-bean-definition-overriding=true

# =========================================
# 테스트 환경용 로깅 설정
# =========================================
# Mockito 관련 불필요한 로그를 제거합니다.
logging.level.org.springframework.test.context.bean.override.mockito=ERROR
logging.level.org.mockito=ERROR
# JWT 필터 디버깅을 위한 로깅 설정
logging.level.com.jober.final2teamdrhong.filter.JwtAuthenticationFilter=DEBUG

# =========================================
# 테스트 환경용 애플리케이션 설정
# =========================================
# 개발 환경 모드로 설정합니다.
app.environment.development=true

# Swagger 서버 URL 설정 (테스트용)
app.swagger.server-url=http://localhost:8080/api/

# =========================================
# 테스트 환경용 인증 설정
# =========================================
# 보안 응답 시간을 0으로 설정하여 테스트 속도를 향상시킵니다.
auth.security.min-response-time-ms=0
# 테스트용 더미 해시값입니다.
auth.security.dummy-hash=$2a$10$dummy.hash.for.testing
# 계정 잠금 관련 설정입니다.
auth.security.max-login-attempts=5
auth.security.account-lock-duration-minutes=30
# 회원 탈퇴 시 익명 이메일 형식
auth.security.anonymized-email-format=deleted_user_%d_%d@deleted.com
# 비밀번호 검증 시 최소 지연 시간 (밀리초)
auth.security.timing-attack-delay-ms=300

# 토큰 유효성 설정입니다.
auth.token.access-token-validity-seconds=900
auth.token.refresh-token-validity-seconds=604800
auth.token.refresh-threshold-seconds=300

# Redis 키 접두사 설정입니다.
auth.redis.refresh-token-key-prefix=refresh_token:
auth.redis.user-tokens-key-prefix=user_tokens:
auth.redis.email-verification-key-prefix=email_verification:
auth.redis.jwt-blacklist-key-prefix=jwt:blacklist:

# 인증 에러 메시지 설정입니다.
auth.messages.invalid-credentials=이메일 또는 비밀번호가 일치하지 않습니다.
auth.messages.invalid-refresh-token=유효하지 않은 리프레시 토큰입니다.
auth.messages.expired-refresh-token=만료되었거나 유효하지 않은 리프레시 토큰입니다.
auth.messages.user-not-found=사용자를 찾을 수 없습니다.
auth.messages.invalid-token-info=토큰 정보가 유효하지 않습니다.
auth.messages.account-locked=너무 많은 로그인 시도로 인해 계정이 일시적으로 잠겼습니다.
auth.messages.verification-code-expired=인증 코드가 만료되었거나 유효하지 않습니다.

# =========================================
# OAuth2 테스트 설정
# =========================================
# 테스트용 OAuth2 클라이언트 설정 (실제 값이 아닌 더미 값)
spring.security.oauth2.client.registration.google.client-id=test-google-client-id
spring.security.oauth2.client.registration.google.client-secret=test-google-client-secret
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
# OAuth2 임시 저장소 설정
auth.oauth2.temp-info-expiry-minutes=15
auth.oauth2.max-extension-minutes=30
auth.oauth2.temp-key-prefix=oauth2_temp:

# =========================================
# 테스트 환경용 메일 서비스 설정
# =========================================
# 메일 자동 설정 비활성화 (테스트에서는 실제 발송하지 않음)
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration
