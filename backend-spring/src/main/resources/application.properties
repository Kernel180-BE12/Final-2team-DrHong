# =========================================
# \uC2A4\uD504\uB9C1 \uC560\uD50C\uB9AC\uCF00\uC774\uC158 \uAE30\uBCF8 \uC815\uBCF4
# =========================================
# \uC560\uD50C\uB9AC\uCF00\uC774\uC158\uC758 \uC774\uB984\uC744 \uC9C0\uC815\uD569\uB2C8\uB2E4.
spring.application.name=Final-2team-DrHong

# 서버 포트 설정
server.port=8080

# =========================================
# \uAC00\uC0C1 \uC2A4\uB808\uB4DC (Project Loom) \uC124\uC815
# =========================================
# JDK 21+ \uC5D0\uC11C \uC0AC\uC6A9 \uAC00\uB2A5, \uC694\uCCAD \uCC98\uB9AC \uC131\uB2A5 \uD5A5\uC0C1\uC744 \uC704\uD574 \uAC00\uC0C1 \uC2A4\uB808\uB4DC\uB97C \uD65C\uC131\uD654\uD569\uB2C8\uB2E4.
spring.threads.virtual.enabled=true

# =========================================
# 1. 데이터베이스 연결(DataSource) 설정
# =========================================
# 연결할 데이터베이스의 URL입니다. (MySQL, useSSL=false, 서버시간대=서울, 문자셋=UTF-8)
spring.datasource.url=jdbc:mysql://localhost:3307/notimo?useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=UTF-8
# 데이터베이스 접속에 사용할 사용자 이름입니다.
spring.datasource.username=admin
# 데이터베이스 접속 비밀번호입니다. (.env 또는 환경변수에서 값을 가져옵니다)
spring.datasource.password=${DB_PASSWORD}
# 사용할 JDBC 드라이버 클래스를 지정합니다. (MySQL 8+)
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# H2 설정 (테스트용 - Redis/이메일 테스트)
# spring.datasource.url=jdbc:h2:mem:testdb
# spring.datasource.username=sa
# spring.datasource.password=
# spring.datasource.driver-class-name=org.h2.Driver

# =========================================
# 2. JPA & Hibernate \uC124\uC815
# =========================================
# \uC560\uD50C\uB9AC\uCF00\uC774\uC158 \uC2DC\uC791 \uC2DC, \uC5D4\uD2F0\uD2F0\uC640 DB \uD14C\uC774\uBE14\uC744 \uBE44\uAD50\uD558\uC5EC \uC790\uB3D9\uC73C\uB85C \uC2A4\uD0A4\uB9C8\uB97C \uBCC0\uACBD\uD560\uC9C0 \uC124\uC815\uD569\uB2C8\uB2E4.
# - update: \uBCC0\uACBD\uB41C \uBD80\uBD84\uB9CC \uBC18\uC601\uD569\uB2C8\uB2E4. (\uAC1C\uBC1C \uC2DC \uC720\uC6A9)
# - none: \uC544\uBB34\uAC83\uB3C4 \uD558\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4. (\uC6B4\uC601 \uD658\uACBD \uAD8C\uC7A5)
# - validate: \uC5D4\uD2F0\uD2F0\uC640 \uD14C\uC774\uBE14\uC774 \uC77C\uCE58\uD558\uB294\uC9C0\uB9CC \uAC80\uC99D\uD569\uB2C8\uB2E4.
# - create: \uAE30\uC874 \uD14C\uC774\uBE14\uC744 \uC0AD\uC81C\uD558\uACE0 \uC0C8\uB85C \uB9CC\uB4ED\uB2C8\uB2E4. (\uD14C\uC2A4\uD2B8 \uC2DC \uC720\uC6A9)
spring.jpa.hibernate.ddl-auto=update
# JPA\uAC00 \uC2E4\uD589\uD558\uB294 SQL \uCFFC\uB9AC\uB97C \uB85C\uADF8\uC5D0 \uCD9C\uB825\uD560\uC9C0 \uC5EC\uBD80\uB97C \uC124\uC815\uD569\uB2C8\uB2E4. (\uAC1C\uBC1C \uC2DC \uB514\uBC84\uAE45\uC6A9)
spring.jpa.show-sql=true
# \uB85C\uADF8\uC5D0 \uCD9C\uB825\uB418\uB294 SQL \uCFFC\uB9AC\uB97C \uBCF4\uAE30 \uC88B\uAC8C \uC815\uB82C(pretty-format)\uD569\uB2C8\uB2E4.
spring.jpa.properties.hibernate.format_sql=true
# 사용하는 데이터베이스에 맞는 SQL 방언(Dialect)을 지정합니다.
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
# H2 방언 (테스트용 - Redis/이메일 테스트)
# spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# OSIV(Open Session In View) 설정. DB 커넥션 자원의 낭비를 막고 시스템 안정성을 높이기 위해 false로 설정합니다.
# false로 설정 시, 모든 DB 관련 작업(지연 로딩 포함)은 트랜잭션이 적용된 서비스 계층에서 완료해야 합니다.
spring.jpa.open-in-view=false

# =========================================
# HTTP \uC11C\uBE14\uB9BF \uC778\uCF54\uB529 \uC124\uC815 (\uAC15\uD654)
# \uC6F9 \uC694\uCCAD \uBC0F \uC751\uB2F5\uC758 \uBB38\uC790 \uC778\uCF54\uB529\uC744 UTF-8\uB85C \uD1B5\uC77C\uD558\uC5EC \uD55C\uAE00 \uAE68\uC9D0\uC744 \uBC29\uC9C0\uD569\uB2C8\uB2E4.
# =========================================
# HTTP \uD1B5\uC2E0\uC758 \uAE30\uBCF8 \uBB38\uC790 \uC778\uCF54\uB529\uC744 UTF-8\uB85C \uC9C0\uC815\uD569\uB2C8\uB2E4.
server.servlet.encoding.charset=UTF-8
# \uC704\uC5D0\uC11C \uC124\uC815\uD55C \uC778\uCF54\uB529 \uD544\uD130\uB97C \uD65C\uC131\uD654\uD569\uB2C8\uB2E4. (\uAE30\uBCF8\uAC12\uC774 true)
server.servlet.encoding.enabled=true
# \uC694\uCCAD(Request)\uACFC \uC751\uB2F5(Response) \uBAA8\uB450\uC5D0 \uD56D\uC0C1 \uC778\uCF54\uB529\uC744 \uAC15\uC81C\uB85C \uC801\uC6A9\uD560\uC9C0 \uC5EC\uBD80\uB97C \uC124\uC815\uD569\uB2C8\uB2E4.
server.servlet.encoding.force=true
# \uC694\uCCAD(Request)\uC5D0\uB9CC \uAC15\uC81C\uB85C \uC778\uCF54\uB529\uC744 \uC801\uC6A9\uD560\uC9C0 \uC5EC\uBD80\uC785\uB2C8\uB2E4. (force=true \uC774\uBA74 \uC774 \uC124\uC815\uC740 \uC0AC\uC2E4\uC0C1 \uBB34\uC2DC\uB429\uB2C8\uB2E4)
server.servlet.encoding.force-request=true
# \uC751\uB2F5(Response)\uC5D0\uB9CC \uAC15\uC81C\uB85C \uC778\uCF54\uB529\uC744 \uC801\uC6A9\uD560\uC9C0 \uC5EC\uBD80\uC785\uB2C8\uB2E4. (force=true \uC774\uBA74 \uC774 \uC124\uC815\uC740 \uC0AC\uC2E4\uC0C1 \uBB34\uC2DC\uB429\uB2C8\uB2E4)
server.servlet.encoding.force-response=true

# =========================================
# \uC2A4\uD504\uB9C1 \uC560\uD50C\uB9AC\uCF00\uC774\uC158 \uCD94\uAC00 \uC778\uCF54\uB529 \uC124\uC815
# =========================================
# \uB2E4\uAD6D\uC5B4 \uC9C0\uC6D0(i18n)\uC744 \uC704\uD55C \uBA54\uC2DC\uC9C0 \uD30C\uC77C(\uC608: messages.properties)\uC758 \uC778\uCF54\uB529\uC744 UTF-8\uB85C \uC124\uC815\uD569\uB2C8\uB2E4.
spring.messages.encoding=UTF-8
# \uC2A4\uD504\uB9C1 \uBD80\uD2B8 \uC2DC\uC791 \uC2DC \uD130\uBBF8\uB110\uC5D0 \uD45C\uC2DC\uB418\uB294 \uBC30\uB108\uC758 \uBB38\uC790\uB97C UTF-8\uB85C \uC124\uC815\uD569\uB2C8\uB2E4.
spring.banner.charset=UTF-8

# \uC2A4\uD504\uB9C1 \uBD80\uD2B8\uAC00 \uC2DC\uC791\uB420 \uB54C docker-compose.yml \uD30C\uC77C\uC774 \uC874\uC7AC\uD558\uB354\uB77C\uB3C4 Docker \uC5F0\uB3D9 \uAE30\uB2A5\uC744 \uC644\uC804\uD788 \uBB34\uC2DC
# \uC2E4\uC81C \uB3C4\uCEE4 \uC124\uC815\uB2E8\uACC4\uAC00 \uC2DC\uC791\uB418\uBA74 \uC544\uB798 \uC124\uC815\uC740 \uC0AD\uC81C \uB610\uB294 \uC8FC\uC11D \uCC98\uB9AC \uD544\uC218
spring.docker.compose.enabled=false

# =========================================
# Spring Session JDBC \uC124\uC815
# =========================================
# \uC560\uD50C\uB9AC\uCF00\uC774\uC158 \uC2DC\uC791 \uC2DC \uC138\uC158 \uD14C\uC774\uBE14(\uC608: SPRING_SESSION) \uC790\uB3D9 \uC0DD\uC131

# JWT \uAE30\uBC18\uC758 Stateless \uC778\uC99D\uC744 \uC0AC\uC6A9\uD558\uBBC0\uB85C \uC544\uB798 \uC124\uC815\uC740 \uC8FC\uC11D \uCC98\uB9AC\uD569\uB2C8\uB2E4.
# spring.session.jdbc.initialize-schema=always

# =========================================
# JWT (JSON Web Token) \uC124\uC815
# =========================================
# JWT \uD1A0\uD070\uC744 \uC11C\uBA85\uD558\uACE0 \uAC80\uC99D\uD558\uB294 \uB370 \uC0AC\uC6A9\uD560 \uBE44\uBC00 \uD0A4\uC785\uB2C8\uB2E4. (.env \uD30C\uC77C\uC5D0\uC11C \uD658\uACBD\uBCC0\uC218\uB85C \uAD00\uB9AC)
jwt.secret.key=${JWT_SECRET_KEY}

# =========================================
# Redis \uC124\uC815
# =========================================
# Redis \uC11C\uBC84\uC758 \uD638\uC2A4\uD2B8 \uC8FC\uC18C\uC785\uB2C8\uB2E4. (\uB85C\uCEEC \uAC1C\uBC1C \uC2DC \uBCF4\uD1B5 localhost)
spring.data.redis.host=localhost
# Redis \uC11C\uBC84\uC758 \uD3EC\uD2B8 \uBC88\uD638\uC785\uB2C8\uB2E4. (\uAE30\uBCF8\uAC12 6379)
spring.data.redis.port=6379
# Redis \uC811\uC18D \uBE44\uBC00\uBC88\uD638\uAC00 \uC788\uB2E4\uBA74 \uC5EC\uAE30\uC5D0 \uC124\uC815\uD569\uB2C8\uB2E4.
# spring.data.redis.password=your-redis-password

# Redis \uC5F0\uACB0 \uD480 \uC124\uC815 (\uC131\uB2A5 \uBC0F \uC548\uC815\uC131 \uD5A5\uC0C1)
# spring.data.redis.lettuce.pool.max-active=8
# spring.data.redis.lettuce.pool.max-wait=-1ms
# spring.data.redis.lettuce.pool.max-idle=8
# spring.data.redis.lettuce.pool.min-idle=0

# =========================================
# Spring Mail (\uC774\uBA54\uC77C \uBC1C\uC1A1) \uC124\uC815
# =========================================
# \uC0AC\uC6A9\uD560 SMTP \uC11C\uBC84\uC758 \uD638\uC2A4\uD2B8 \uC8FC\uC18C\uC785\uB2C8\uB2E4.
spring.mail.host=smtp.gmail.com
# SMTP \uC11C\uBC84\uC758 \uD3EC\uD2B8 \uBC88\uD638\uC785\uB2C8\uB2E4.
spring.mail.port=587
# \uC774\uBA54\uC77C \uBC1C\uC1A1\uC5D0 \uC0AC\uC6A9\uD560 \uACC4\uC815\uC758 \uC0AC\uC6A9\uC790 \uC774\uB984\uC785\uB2C8\uB2E4.
spring.mail.username=kernelteam2jdi@gmail.com
# \uD574\uB2F9 \uC774\uBA54\uC77C \uACC4\uC815\uC758 \uC571 \uBE44\uBC00\uBC88\uD638\uC785\uB2C8\uB2E4. (.env \uD30C\uC77C\uC5D0\uC11C \uD658\uACBD\uBCC0\uC218\uB85C \uAD00\uB9AC)
spring.mail.password=${MAIL_PASSWORD}
# SMTP \uC11C\uBC84 \uC778\uC99D\uC744 \uC0AC\uC6A9\uD560\uC9C0 \uC5EC\uBD80\uC785\uB2C8\uB2E4.
spring.mail.properties.mail.smtp.auth=true
# TLS(\uC804\uC1A1 \uACC4\uCE35 \uBCF4\uC548) \uC5F0\uACB0\uC744 \uC0AC\uC6A9\uD560\uC9C0 \uC5EC\uBD80\uC785\uB2C8\uB2E4.
spring.mail.properties.mail.smtp.starttls.enable=true
# \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC2E4\uD328 \uC2DC \uC7AC\uC2DC\uB3C4 \uBC0F \uD0C0\uC784\uC544\uC6C3 \uC124\uC815 (\uC548\uC815\uC131 \uD5A5\uC0C1)
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=3000
spring.mail.properties.mail.smtp.writetimeout=5000

# =========================================
# Rate Limiting \uC124\uC815 (\uBCF4\uC548 \uAC15\uD654)
# =========================================
# \uC774\uBA54\uC77C \uC778\uC99D \uCF54\uB4DC \uBC1C\uC1A1 \uC81C\uD55C (\uB3D9\uC77C IP \uAE30\uC900: 5\uBD84\uAC04 3\uD68C)
rate-limit.email-send.requests-per-window=3
rate-limit.email-send.window-duration-minutes=5
# \uC774\uBA54\uC77C \uC778\uC99D \uCF54\uB4DC \uAC80\uC99D \uC81C\uD55C (\uB3D9\uC77C \uC774\uBA54\uC77C \uAE30\uC900: 10\uBD84\uAC04 5\uD68C)
rate-limit.email-verify.requests-per-window=5
rate-limit.email-verify.window-duration-minutes=10
# \uD68C\uC6D0\uAC00\uC785 \uC81C\uD55C (\uB3D9\uC77C IP \uAE30\uC900: 1\uC2DC\uAC04\uAC04 10\uD68C)
rate-limit.signup.requests-per-window=10
rate-limit.signup.window-duration-minutes=60
# 로그인 시도 제한 (동일 IP 기준: 15분간 5회)
rate-limit.login.requests-per-window=5
rate-limit.login.window-duration-minutes=15
# 토큰 갱신 제한 (동일 IP 기준: 5분간 10회)
rate-limit.refresh-token.requests-per-window=10
rate-limit.refresh-token.window-duration-minutes=5


# =========================================
# API \uC804\uC5ED \uACBD\uB85C \uC811\uB450\uC0AC \uC124\uC815
# =========================================
# 모든 REST API 엔드포인트 경로 앞에 /api 접두사를 추가합니다.
server.servlet.context-path=/api

# =========================================
# \uC560\uD50C\uB9AC\uCF00\uC774\uC158 \uD658\uACBD \uC124\uC815
# =========================================
# \uAC1C\uBC1C\uD658\uACBD \uC5EC\uBD80 (true: \uAC1C\uBC1C\uD658\uACBD, false: \uC6B4\uC601\uD658\uACBD)
# \uAC1C\uBC1C\uD658\uACBD\uC5D0\uC11C\uB294 \uB85C\uCEEC IP(127.0.0.1, localhost \uB4F1)\uB97C \uD5C8\uC6A9\uD569\uB2C8\uB2E4.
app.environment.development=true

# =========================================
# CORS 보안 설정
# =========================================
# 허용할 Origin 도메인 목록 (쉼표로 구분)
# 개발환경: 로컬 개발 서버 주소
# 프로덕션: 실제 프론트엔드 도메인으로 변경 필요
app.cors.allowed-origins=http://localhost:3000,http://127.0.0.1:3000,http://localhost:8080,http://127.0.0.1:8080

# =========================================
# Swagger/OpenAPI 설정
# =========================================
# \uCEE4\uC2A4\uD140 Swagger \uC815\uBCF4 (SwaggerConfig\uC5D0\uC11C \uC0AC\uC6A9)
app.swagger.title=notimo API
app.swagger.description=notimo \uC560\uD50C\uB9AC\uCF00\uC774\uC158\uC758 REST API \uBB38\uC11C
app.swagger.version=v1.0
app.swagger.contact.name=notimo Development Team
app.swagger.contact.email=dev@notimo.com

# Swagger UI \uACBD\uB85C: /api/swagger-ui/index.html
springdoc.swagger-ui.path=/swagger-ui.html
# API \uBB38\uC11C \uACBD\uB85C: /api/v3/api-docs
springdoc.api-docs.path=/v3/api-docs
# Swagger UI\uC5D0\uC11C \uC2DC\uB3C4(Try it out) \uAE30\uB2A5 \uD65C\uC131\uD654
springdoc.swagger-ui.try-it-out-enabled=true
# \uD0DC\uADF8\uB97C \uC54C\uD30C\uBCB3 \uC21C\uC73C\uB85C \uC815\uB82C
springdoc.swagger-ui.tags-sorter=alpha
# API \uC5F0\uC0B0\uC744 \uC54C\uD30C\uBCB3 \uC21C\uC73C\uB85C \uC815\uB82C
springdoc.swagger-ui.operations-sorter=alpha
# \uAE30\uBCF8\uC801\uC73C\uB85C \uBAA8\uB4E0 \uC5D4\uB4DC\uD3EC\uC778\uD2B8 \uD45C\uC2DC
springdoc.swagger-ui.display-request-duration=true
# \uC751\uB2F5 \uC2DC\uAC04 \uD45C\uC2DC
springdoc.swagger-ui.show-extensions=true

# =========================================
# 인증 관련 설정
# =========================================
# 보안 설정
auth.security.min-response-time-ms=200
auth.security.dummy-hash=$2a$10$dummy.hash.to.prevent.timing.attacks.for.security.purposes
auth.security.max-login-attempts=5
auth.security.account-lock-duration-minutes=30

# 토큰 설정
auth.token.access-token-validity-seconds=900
auth.token.refresh-token-validity-seconds=604800
auth.token.refresh-threshold-seconds=300

# Redis 키 설정
auth.redis.refresh-token-key-prefix=refresh_token:
auth.redis.user-tokens-key-prefix=user_tokens:
auth.redis.email-verification-key-prefix=email_verification:
auth.redis.jwt-blacklist-key-prefix=jwt:blacklist:

# 에러 메시지 설정
auth.messages.invalid-credentials=이메일 또는 비밀번호가 일치하지 않습니다.
auth.messages.invalid-refresh-token=유효하지 않은 리프레시 토큰입니다.
auth.messages.expired-refresh-token=만료되었거나 유효하지 않은 리프레시 토큰입니다.
auth.messages.user-not-found=사용자를 찾을 수 없습니다.
auth.messages.invalid-token-info=토큰 정보가 유효하지 않습니다.
auth.messages.account-locked=너무 많은 로그인 시도로 인해 계정이 일시적으로 잠겼습니다.
auth.messages.verification-code-expired=인증 코드가 만료되었거나 유효하지 않습니다.

